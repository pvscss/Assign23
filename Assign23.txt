> # Get quantmod
> library(quantmod)
> library(forecast)
> start <- as.Date("2018-05-01")
> end <- as.Date("2018-08-07")
> getSymbols("AAPL", src = "yahoo", from = start, to = end)
[1] "AAPL"
> class(AAPL)
[1] "xts" "zoo"
> head(AAPL)
           AAPL.Open AAPL.High AAPL.Low AAPL.Close AAPL.Volume AAPL.Adjusted
2018-05-01    166.41    169.20   165.27     169.10    53569400      168.4504
2018-05-02    175.23    177.75   173.80     176.57    66539400      175.8918
2018-05-03    175.88    177.50   174.44     176.89    34068200      176.2105
2018-05-04    178.25    184.25   178.17     183.83    56201300      183.1239
2018-05-07    185.18    187.67   184.75     185.16    42451400      184.4487
2018-05-08    184.99    186.22   183.67     186.05    28402800      185.3353
> plot(AAPL[, "AAPL.Close"], main = "AAPL")
> stocks <- as.xts(data.frame(AAPL = AAPL[, "AAPL.Close"]))
> head(stocks)
           AAPL.Close
2018-05-01     169.10
2018-05-02     176.57
2018-05-03     176.89
2018-05-04     183.83
2018-05-07     185.16
2018-05-08     186.05
> stock_prices = AAPL[, "AAPL.Close"]
> # Compute the log returns for the stock
> stock = diff(log(stock_prices),lag=1)
> stock = stock[!is.na(stock)]
> # Plot log returns 
> plot(stock,type='l', main='log returns plot')
> # Split the dataset in two parts - training and testing
> breakpoint = floor(nrow(stock)*(2.9/3))
> # Apply the ACF and PACF functions
> par(mfrow = c(1,1))
> acf.stock = acf(stock[c(1:breakpoint),], main='ACF Plot', lag.max=100)
> pacf.stock = pacf(stock[c(1:breakpoint),], main='PACF Plot', lag.max=100)
> # Initialzing an xts object for Actual log returns
> Actual_series = xts(0,as.Date("2018-08-01","%Y-%m-%d"))
> # Initialzing a dataframe for the forecasted return series
> forecasted_series = data.frame(Forecasted = numeric())
> for (b in breakpoint:(nrow(stock)-1)) {
+   
+   stock_train = stock[1:b, ]
+   stock_test = stock[(b+1):nrow(stock), ]
+   
+   # Summary of the ARIMA model using the determined (p,d,q) parameters
+   fit = arima(stock_train, order = c(2, 0, 2),include.mean=FALSE)
+   summary(fit)
+   
+   # plotting a acf plot of the residuals
+   acf(fit$residuals,main="Residuals plot")
+   
+   # Forecasting the log returns
+   arima.forecast = forecast(fit, h = 1,level=99)
+   summary(arima.forecast)
+   
+   # plotting the forecast
+   par(mfrow=c(1,1))
+   plot(arima.forecast, main = "ARIMA Forecast")
+   
+   # Creating a series of forecasted returns for the forecasted period
+   forecasted_series = rbind(forecasted_series,arima.forecast$mean[1])
+   colnames(forecasted_series) = c("Forecasted")
+   
+   # Creating a series of actual returns for the forecasted period
+   Actual_return = stock[(b+1),]
+   Actual_series = c(Actual_series,xts(Actual_return))
+   rm(Actual_return)
+   
+   print(stock_prices[(b+1),])
+   print(stock_prices[(b+2),])
+   
+ }

Call:
arima(x = stock_train, order = c(2, 0, 2), include.mean = FALSE)

Coefficients:
          ar1      ar2     ma1    ma2
      -1.0075  -0.5709  1.1102  1.000
s.e.   0.1533   0.1445  0.0617  0.085

sigma^2 estimated as 0.0001347:  log likelihood = 191.91,  aic = -373.83

Training set error measures:
                      ME       RMSE         MAE      MPE     MAPE      MASE
Training set 0.002349087 0.01160604 0.007547492 110.2482 132.0381 0.6223664
                   ACF1
Training set 0.01237023

Forecast method: ARIMA(2,0,2) with zero mean

Model Information:

Call:
arima(x = stock_train, order = c(2, 0, 2), include.mean = FALSE)

Coefficients:
          ar1      ar2     ma1    ma2
      -1.0075  -0.5709  1.1102  1.000
s.e.   0.1533   0.1445  0.0617  0.085

sigma^2 estimated as 0.0001347:  log likelihood = 191.91,  aic = -373.83

Error measures:
                      ME       RMSE         MAE      MPE     MAPE      MASE
Training set 0.002349087 0.01160604 0.007547492 110.2482 132.0381 0.6223664
                   ACF1
Training set 0.01237023

Forecasts:
   Point Forecast       Lo 99      Hi 99
65  -0.0003052949 -0.03062564 0.03001505
           AAPL.Close
2018-08-01      201.5
           AAPL.Close
2018-08-02     207.39

Call:
arima(x = stock_train, order = c(2, 0, 2), include.mean = FALSE)

Coefficients:
          ar1     ar2     ma1     ma2
      -0.5283  0.2117  0.7677  0.2760
s.e.   0.3190  0.4603  0.2957  0.4705

sigma^2 estimated as 0.0001542:  log likelihood = 192.75,  aic = -375.5

Training set error measures:
                      ME       RMSE         MAE      MPE     MAPE      MASE
Training set 0.002240606 0.01241848 0.008608154 91.61707 130.7324 0.6952265
                    ACF1
Training set -0.02198349

Forecast method: ARIMA(2,0,2) with zero mean

Model Information:

Call:
arima(x = stock_train, order = c(2, 0, 2), include.mean = FALSE)

Coefficients:
          ar1     ar2     ma1     ma2
      -0.5283  0.2117  0.7677  0.2760
s.e.   0.3190  0.4603  0.2957  0.4705

sigma^2 estimated as 0.0001542:  log likelihood = 192.75,  aic = -375.5

Error measures:
                      ME       RMSE         MAE      MPE     MAPE      MASE
Training set 0.002240606 0.01241848 0.008608154 91.61707 130.7324 0.6952265
                    ACF1
Training set -0.02198349

Forecasts:
   Point Forecast        Lo 99      Hi 99
66     0.02352557 -0.008462324 0.05551347
           AAPL.Close
2018-08-02     207.39
           AAPL.Close
2018-08-03     207.99

Call:
arima(x = stock_train, order = c(2, 0, 2), include.mean = FALSE)

Coefficients:
          ar1      ar2     ma1     ma2
      -0.6889  -0.3970  0.8874  0.7817
s.e.   0.3052   0.2685  0.2584  0.2262

sigma^2 estimated as 0.0001548:  log likelihood = 195.49,  aic = -380.98

Training set error measures:
                      ME      RMSE         MAE      MPE     MAPE      MASE
Training set 0.002309411 0.0124437 0.008573885 90.75252 139.9877 0.6810011
                    ACF1
Training set -0.02510851

Forecast method: ARIMA(2,0,2) with zero mean

Model Information:

Call:
arima(x = stock_train, order = c(2, 0, 2), include.mean = FALSE)

Coefficients:
          ar1      ar2     ma1     ma2
      -0.6889  -0.3970  0.8874  0.7817
s.e.   0.3052   0.2685  0.2584  0.2262

sigma^2 estimated as 0.0001548:  log likelihood = 195.49,  aic = -380.98

Error measures:
                      ME      RMSE         MAE      MPE     MAPE      MASE
Training set 0.002309411 0.0124437 0.008573885 90.75252 139.9877 0.6810011
                    ACF1
Training set -0.02510851

Forecasts:
   Point Forecast       Lo 99      Hi 99
67    -0.01020142 -0.04225426 0.02185142
           AAPL.Close
2018-08-03     207.99
           AAPL.Close
2018-08-06     209.07
> # Adjust the length of the Actual return series
> Actual_series = Actual_series[-1]
> # Create a time series object of the forecasted series
> forecasted_series = xts(forecasted_series,index(Actual_series))
> # Create a plot of the two return series - Actual versus Forecasted
> plot(Actual_series,type='l',main='Actual Returns Vs Forecasted Returns')
> lines(forecasted_series,lwd=1.5,col='red')
> legend('bottomright',c("Actual","Forecasted"),lty=c(1,1),lwd=c(1.5,1.5),col=c('black','red'))
> # Create a table for the accuracy of the forecast
> comparsion = merge(Actual_series,forecasted_series)
> comparsion$Accuracy = sign(comparsion$Actual_series)==sign(comparsion$Forecasted)
> print(comparsion)
           Actual_series    Forecasted Accuracy
2018-08-02   0.028811692 -0.0003052949        0
2018-08-03   0.002888952  0.0235255725        1
2018-08-06   0.005179132 -0.0102014158        0
> # Compute the accuracy percentage metric
> Accuracy_percentage = sum(comparsion$Accuracy == 1)*100/length(comparsion$Accuracy)
> print(Accuracy_percentage)
[1] 33.33333